("recdiv" recdiv recdiv_works 0 (recdiv_works-1 nil 3872028486 ("" (induct m) (("1" (skeep) (("1" (expand "recdiv") (("1" (assert) nil nil)) nil)) nil) ("2" (skeep) (("2" (skeep) (("2" (expand "recdiv") (("2" (lift-if) (("2" (prop) (("1" (typepred "j") (("1" (case "j=0") (("1" (hide -2) (("1" (inst?) (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (typepred "j") (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("recdiv" recdiv recdiv_by_one_is_m 0 (recdiv_by_one_is_m-1 nil 3872030048 ("" (induct m) (("1" (expand "recdiv") (("1" (propax) nil nil)) nil) ("2" (skeep) (("2" (expand "recdiv" 1) (("2" (propax) nil nil)) nil)) nil)) nil) ((nat_induction formula-decl nil naturalnumbers nil) (recdiv def-decl "nat" recdiv nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("recdiv" recdiv m_recdiv_by_one_is_m 0 (m_recdiv_by_one_is_m-1 nil 3872030985 ("" (induct m) (("1" (expand "recdiv") (("1" (propax) nil nil)) nil) ("2" (skeep) (("2" (expand "recdiv" 1) (("2" (propax) nil nil)) nil)) nil)) nil) ((nat_induction formula-decl nil naturalnumbers nil) (recdiv def-decl "nat" recdiv nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("recdiv" recdiv recdiv_rem 0 (recdiv_rem-1 nil 3872030755 ("" (expand "recdiv") (("" (propax) nil nil)) nil) ((recdiv def-decl "nat" recdiv nil)) shostak))("recdiv" recdiv recdiv_symmetric 0 (recdiv_symmetric-1 nil 3872029565 ("" (skeep) (("" (expand "recdiv") (("" (expand "recdiv") (("" (propax) nil nil)) nil)) nil)) nil) ((recdiv def-decl "nat" recdiv nil)) shostak))